[{"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\index.js":"1","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\App.js":"2","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\Login\\Login.js":"3","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\Home\\Home.js":"4","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\MainHeader\\MainHeader.js":"5","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\MainHeader\\Navigation.js":"6","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\UI\\Card\\Card.js":"7","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\UI\\Button\\Button.js":"8","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\store\\auth-context.js":"9","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\UI\\Input\\Input.js":"10"},{"size":298,"mtime":1633258301902,"results":"11","hashOfConfig":"12"},{"size":2337,"mtime":1633256784158,"results":"13","hashOfConfig":"12"},{"size":9294,"mtime":1633258195785,"results":"14","hashOfConfig":"12"},{"size":458,"mtime":1633256927215,"results":"15","hashOfConfig":"12"},{"size":302,"mtime":1632219517736,"results":"16","hashOfConfig":"12"},{"size":1624,"mtime":1632219525697,"results":"17","hashOfConfig":"12"},{"size":218,"mtime":1616593928000,"results":"18","hashOfConfig":"12"},{"size":353,"mtime":1616593928000,"results":"19","hashOfConfig":"12"},{"size":1372,"mtime":1633256599734,"results":"20","hashOfConfig":"12"},{"size":476,"mtime":1633255374767,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k6vp2c",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\index.js",[],"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\App.js",["45","46"],"import React, { useState, useEffect, useContext } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/store/auth-context\";\n\nexport default function App() {\n  const ctx = useContext(AuthContext);\n\n  return (\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        {!ctx.isLoggedIn && <Login />}\n        {ctx.isLoggedIn && <Home />}\n      </main>\n    </React.Fragment>\n  );\n}\n\n// function App() {\n//   /*\n//   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  OPTIONAL  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//   We can also make a different component which handles the context and all the data realted to it.\n//   Such as for this example, the LoggedIn state, the Effects, the handlers will be present in that component and not in APP componenet\n//   The we will use that context in APP(therefore App.js will be a consumer of that context)\n\n//   */\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   useEffect(() => {\n//     // this is only run's when the dependencies change.\n//     // In this case the dependencies only changes once i.e. at the starting of the application.\n//     const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n//     if (storedUserLoggedInInformation === \"1\") setIsLoggedIn(true);\n//   }, []);\n\n//   const loginHandler = (email, password) => {\n//     // We should of course check email and password\n//     // But it's just a dummy/ demo anyways\n//     localStorage.setItem(\"isLoggedIn\", \"1\");\n//     setIsLoggedIn(true);\n//   };\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem(\"isLoggedIn\");\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     // Since AuthContext is not a component and JSX needs to have a component.\n//     // So using method Provider we can make it as component.\n//     <AuthContext.Provider\n//       value={{\n//         isLoggedIn: isLoggedIn,\n//         onLogout: logoutHandler,\n//       }}\n//     >\n//       <MainHeader />\n//       <main>\n//         {!isLoggedIn && <Login onLogin={loginHandler} />}\n//         {isLoggedIn && <Home onLogout={logoutHandler} />}\n//       </main>\n//     </AuthContext.Provider>\n//   );\n// }\n\n// export default App;\n","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\Login\\Login.js",["47"],"import React, { useState, useEffect, useReducer, useContext } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport Input from \"../UI/Input/Input\";\nimport AuthContext from \"../store/auth-context\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.includes(\"@\") };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null,\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const authCtx = useContext(AuthContext);\n\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n\n    return () => {\n      console.log(\"EFFECT CLEANUP\");\n    };\n  }, []);\n\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity!\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n\n    return () => {\n      console.log(\"CLEANUP\");\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPassword({ type: \"INPUT_BLUR\" });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n\n// // This function is declared outside the Component because in this function we are not using anything from the component/ we are not interacting with anyside the component\n// // !And if we need something inside the function it is automatically passed by React.\n// const emailReducer = (state, action) => {\n//   if (action.type === \"USER_INPUT\") {\n//     return { value: action.val, isValid: action.val.includes(\"@\") };\n//   }\n//   if (action.type === \"INPUT_BLUR\") {\n//     return { value: state.value, isValid: state.value.includes(\"@\") };\n//   }\n//   return { value: \"\", isValid: false };\n// };\n// const passwordReducer = (state, action) => {\n//   if (action.type === \"USER_INPUT\") {\n//     return { value: action.val, isValid: action.val.trim().length > 6 };\n//   }\n//   if (action.type === \"INPUT_BLUR\") {\n//     return { value: state.value, isValid: state.value.trim().length > 6 };\n//   }\n//   return { value: \"\", isValid: false };\n// };\n\n// const Login = (props) => {\n//   // const [enteredEmail, setEnteredEmail] = useState(\"\");\n//   // const [emailIsValid, setEmailIsValid] = useState();\n//   // const [enteredPassword, setEnteredPassword] = useState(\"\");\n//   // const [passwordIsValid, setPasswordIsValid] = useState();\n//   const [formIsValid, setFormIsValid] = useState(false);\n\n//   const [emailState, dispatchEmail] = useReducer(emailReducer, {\n//     value: \"\",\n//     isValid: null,\n//   });\n//   const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n//     value: \"\",\n//     isValid: null,\n//   });\n//   const authCtx = useContext(AuthContext);\n\n//   // alias assignment\n//   const { isValid: emailIsValid } = emailState;\n//   const { isValid: passwordIsValid } = passwordState;\n\n//   useEffect(() => {\n//     // Due to adding this dependencies, we tell react that after running this login page each time we need to execute this useEffect only is enteredEmail and enteredPassword are present.\n//     // *i.e. only run when dependencies are present/change.\n\n//     // !The reason why we used setTimeout is because, earlier after each keystroke(while entering email or password) the validation check was done.\n//     // !To avoid it we, we set a delay of 5 seconds and then check for validation.\n\n//     const identifier = setTimeout(() => {\n//       // console.log(\"Hi\");\n//       setFormIsValid(emailIsValid && passwordIsValid);\n//     }, 500);\n//     // *This cleanup function will always run before executing/runnig the above function, except when the above function runs for the first time.\n//     // i.e. It will not run for the fist time.\n//     // !The reasons for this cleanup function is to clear the timer for every nextkeystroke. So this cleanup function will only be called if we stopped for complete 5 seconds and then only we can check for validation.\n//     return () => {\n//       // console.log(\"Cleanup\");\n//       clearTimeout(identifier);\n//     };\n//   }, [emailIsValid, passwordIsValid]);\n\n//   const emailChangeHandler = (event) => {\n//     // setEnteredEmail(event.target.value);\n\n//     dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n//     setFormIsValid(event.target.value.includes(\"@\") && passwordState.isValid);\n//   };\n\n//   const passwordChangeHandler = (event) => {\n//     // setEnteredPassword(event.target.value);\n\n//     dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n//     setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n//   };\n\n//   const validateEmailHandler = () => {\n//     // setEmailIsValid(emailState.value.includes(\"@\"));\n\n//     dispatchEmail({ type: \"INPUT_BLUR\" });\n//   };\n\n//   const validatePasswordHandler = () => {\n//     // setPasswordIsValid(enteredPassword.trim().length > 6);\n//     dispatchPassword({ type: \"INPUT_BLUR\" });\n//   };\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     authCtx.onLogin(emailState.value, passwordState.value);\n//   };\n\n//   return (\n//     <Card className={classes.login}>\n//       <form onSubmit={submitHandler}>\n//         <Input\n//           id=\"email\"\n//           type=\"email\"\n//           label=\"E-mail\"\n//           isValid={emailIsValid}\n//           value={emailState.value}\n//           onChange={emailChangeHandler}\n//           onBlur={validateEmailHandler}\n//         ></Input>\n\n//         <Input\n//           id=\"password\"\n//           type=\"password\"\n//           label=\"Password\"\n//           isValid={passwordIsValid}\n//           value={passwordState.value}\n//           onChange={passwordChangeHandler}\n//           onBlur={validatePasswordHandler}\n//         ></Input>\n\n//         {/* <div\n//           className={`${classes.control} ${\n//             passwordState.isValid === false ? classes.invalid : \"\"\n//           }`}\n//         >\n//           <label htmlFor=\"password\">Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             value={passwordState.value}\n//             onChange={passwordChangeHandler}\n//             onBlur={validatePasswordHandler}\n//           />\n//         </div> */}\n\n//         <div className={classes.actions}>\n//           <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n//             Login\n//           </Button>\n//         </div>\n//       </form>\n//     </Card>\n//   );\n// };\n\n// export default Login;\n","D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\Home\\Home.js",[],"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\MainHeader\\MainHeader.js",[],["48","49"],"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\MainHeader\\Navigation.js",[],"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\UI\\Card\\Card.js",[],"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\UI\\Button\\Button.js",[],"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\store\\auth-context.js",[],"D:\\Coding\\WEB DEV\\REACT\\Login-handler\\src\\components\\UI\\Input\\Input.js",[],{"ruleId":"50","severity":1,"message":"51","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":25},{"ruleId":"50","severity":1,"message":"54","line":1,"column":27,"nodeType":"52","messageId":"53","endLine":1,"endColumn":36},{"ruleId":"50","severity":1,"message":"55","line":6,"column":8,"nodeType":"52","messageId":"53","endLine":6,"endColumn":13},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Input' is defined but never used.","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-global-assign","no-unsafe-negation"]